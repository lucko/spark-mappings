// code generated by pbf v3.2.1

// BukkitMappings ========================================

var BukkitMappings = exports.BukkitMappings = {};

BukkitMappings.read = function (pbf, end) {
    return pbf.readFields(BukkitMappings._readField, {classes: {}}, end);
};
BukkitMappings._readField = function (tag, obj, pbf) {
    if (tag === 1)  { var entry = BukkitMappings._FieldEntry1.read(pbf, pbf.readVarint() + pbf.pos); obj.classes[entry.key] = entry.value; }
};
BukkitMappings.write = function (obj, pbf) {
    if (obj.classes) for (var i in obj.classes) if (Object.prototype.hasOwnProperty.call(obj.classes, i)) pbf.writeMessage(1, BukkitMappings._FieldEntry1.write, { key: i, value: obj.classes[i] });
};

// BukkitMappings._FieldEntry1 ========================================

BukkitMappings._FieldEntry1 = {};

BukkitMappings._FieldEntry1.read = function (pbf, end) {
    return pbf.readFields(BukkitMappings._FieldEntry1._readField, {key: "", value: null}, end);
};
BukkitMappings._FieldEntry1._readField = function (tag, obj, pbf) {
    if (tag === 1) obj.key = pbf.readString();
    else if (tag === 2) obj.value = ClassMapping.read(pbf, pbf.readVarint() + pbf.pos);
};
BukkitMappings._FieldEntry1.write = function (obj, pbf) {
    if (obj.key) pbf.writeStringField(1, obj.key);
    if (obj.value) pbf.writeMessage(2, ClassMapping.write, obj.value);
};

// McpMappings ========================================

var McpMappings = exports.McpMappings = {};

McpMappings.read = function (pbf, end) {
    return pbf.readFields(McpMappings._readField, {classes: {}, methods: {}}, end);
};
McpMappings._readField = function (tag, obj, pbf) {
    if (tag === 1)  { var entry = McpMappings._FieldEntry1.read(pbf, pbf.readVarint() + pbf.pos); obj.classes[entry.key] = entry.value; }
    else if (tag === 2)  { entry = McpMappings._FieldEntry2.read(pbf, pbf.readVarint() + pbf.pos); obj.methods[entry.key] = entry.value; }
};
McpMappings.write = function (obj, pbf) {
    if (obj.classes) for (var i in obj.classes) if (Object.prototype.hasOwnProperty.call(obj.classes, i)) pbf.writeMessage(1, McpMappings._FieldEntry1.write, { key: i, value: obj.classes[i] });
    if (obj.methods) for (i in obj.methods) if (Object.prototype.hasOwnProperty.call(obj.methods, i)) pbf.writeMessage(2, McpMappings._FieldEntry2.write, { key: i, value: obj.methods[i] });
};

// McpMappings._FieldEntry1 ========================================

McpMappings._FieldEntry1 = {};

McpMappings._FieldEntry1.read = function (pbf, end) {
    return pbf.readFields(McpMappings._FieldEntry1._readField, {key: "", value: null}, end);
};
McpMappings._FieldEntry1._readField = function (tag, obj, pbf) {
    if (tag === 1) obj.key = pbf.readString();
    else if (tag === 2) obj.value = ClassMapping.read(pbf, pbf.readVarint() + pbf.pos);
};
McpMappings._FieldEntry1.write = function (obj, pbf) {
    if (obj.key) pbf.writeStringField(1, obj.key);
    if (obj.value) pbf.writeMessage(2, ClassMapping.write, obj.value);
};

// McpMappings._FieldEntry2 ========================================

McpMappings._FieldEntry2 = {};

McpMappings._FieldEntry2.read = function (pbf, end) {
    return pbf.readFields(McpMappings._FieldEntry2._readField, {key: "", value: ""}, end);
};
McpMappings._FieldEntry2._readField = function (tag, obj, pbf) {
    if (tag === 1) obj.key = pbf.readString();
    else if (tag === 2) obj.value = pbf.readString();
};
McpMappings._FieldEntry2.write = function (obj, pbf) {
    if (obj.key) pbf.writeStringField(1, obj.key);
    if (obj.value) pbf.writeStringField(2, obj.value);
};

// MojangMappings ========================================

var MojangMappings = exports.MojangMappings = {};

MojangMappings.read = function (pbf, end) {
    return pbf.readFields(MojangMappings._readField, {classes: {}}, end);
};
MojangMappings._readField = function (tag, obj, pbf) {
    if (tag === 1)  { var entry = MojangMappings._FieldEntry1.read(pbf, pbf.readVarint() + pbf.pos); obj.classes[entry.key] = entry.value; }
};
MojangMappings.write = function (obj, pbf) {
    if (obj.classes) for (var i in obj.classes) if (Object.prototype.hasOwnProperty.call(obj.classes, i)) pbf.writeMessage(1, MojangMappings._FieldEntry1.write, { key: i, value: obj.classes[i] });
};

// MojangMappings._FieldEntry1 ========================================

MojangMappings._FieldEntry1 = {};

MojangMappings._FieldEntry1.read = function (pbf, end) {
    return pbf.readFields(MojangMappings._FieldEntry1._readField, {key: "", value: null}, end);
};
MojangMappings._FieldEntry1._readField = function (tag, obj, pbf) {
    if (tag === 1) obj.key = pbf.readString();
    else if (tag === 2) obj.value = ClassMapping.read(pbf, pbf.readVarint() + pbf.pos);
};
MojangMappings._FieldEntry1.write = function (obj, pbf) {
    if (obj.key) pbf.writeStringField(1, obj.key);
    if (obj.value) pbf.writeMessage(2, ClassMapping.write, obj.value);
};

// YarnMappings ========================================

var YarnMappings = exports.YarnMappings = {};

YarnMappings.read = function (pbf, end) {
    return pbf.readFields(YarnMappings._readField, {classes: {}, methods: {}}, end);
};
YarnMappings._readField = function (tag, obj, pbf) {
    if (tag === 1)  { var entry = YarnMappings._FieldEntry1.read(pbf, pbf.readVarint() + pbf.pos); obj.classes[entry.key] = entry.value; }
    else if (tag === 2)  { entry = YarnMappings._FieldEntry2.read(pbf, pbf.readVarint() + pbf.pos); obj.methods[entry.key] = entry.value; }
};
YarnMappings.write = function (obj, pbf) {
    if (obj.classes) for (var i in obj.classes) if (Object.prototype.hasOwnProperty.call(obj.classes, i)) pbf.writeMessage(1, YarnMappings._FieldEntry1.write, { key: i, value: obj.classes[i] });
    if (obj.methods) for (i in obj.methods) if (Object.prototype.hasOwnProperty.call(obj.methods, i)) pbf.writeMessage(2, YarnMappings._FieldEntry2.write, { key: i, value: obj.methods[i] });
};

// YarnMappings._FieldEntry1 ========================================

YarnMappings._FieldEntry1 = {};

YarnMappings._FieldEntry1.read = function (pbf, end) {
    return pbf.readFields(YarnMappings._FieldEntry1._readField, {key: "", value: ""}, end);
};
YarnMappings._FieldEntry1._readField = function (tag, obj, pbf) {
    if (tag === 1) obj.key = pbf.readString();
    else if (tag === 2) obj.value = pbf.readString();
};
YarnMappings._FieldEntry1.write = function (obj, pbf) {
    if (obj.key) pbf.writeStringField(1, obj.key);
    if (obj.value) pbf.writeStringField(2, obj.value);
};

// YarnMappings._FieldEntry2 ========================================

YarnMappings._FieldEntry2 = {};

YarnMappings._FieldEntry2.read = function (pbf, end) {
    return pbf.readFields(YarnMappings._FieldEntry2._readField, {key: "", value: ""}, end);
};
YarnMappings._FieldEntry2._readField = function (tag, obj, pbf) {
    if (tag === 1) obj.key = pbf.readString();
    else if (tag === 2) obj.value = pbf.readString();
};
YarnMappings._FieldEntry2.write = function (obj, pbf) {
    if (obj.key) pbf.writeStringField(1, obj.key);
    if (obj.value) pbf.writeStringField(2, obj.value);
};

// ClassMapping ========================================

var ClassMapping = exports.ClassMapping = {};

ClassMapping.read = function (pbf, end) {
    return pbf.readFields(ClassMapping._readField, {mapped: "", obfuscated: "", methods: []}, end);
};
ClassMapping._readField = function (tag, obj, pbf) {
    if (tag === 1) obj.mapped = pbf.readString();
    else if (tag === 2) obj.obfuscated = pbf.readString();
    else if (tag === 3) obj.methods.push(MethodMapping.read(pbf, pbf.readVarint() + pbf.pos));
};
ClassMapping.write = function (obj, pbf) {
    if (obj.mapped) pbf.writeStringField(1, obj.mapped);
    if (obj.obfuscated) pbf.writeStringField(2, obj.obfuscated);
    if (obj.methods) for (var i = 0; i < obj.methods.length; i++) pbf.writeMessage(3, MethodMapping.write, obj.methods[i]);
};

// MethodMapping ========================================

var MethodMapping = exports.MethodMapping = {};

MethodMapping.read = function (pbf, end) {
    return pbf.readFields(MethodMapping._readField, {mapped: "", obfuscated: "", description: "", intermediate: ""}, end);
};
MethodMapping._readField = function (tag, obj, pbf) {
    if (tag === 1) obj.mapped = pbf.readString();
    else if (tag === 2) obj.obfuscated = pbf.readString();
    else if (tag === 3) obj.description = pbf.readString();
    else if (tag === 4) obj.intermediate = pbf.readString();
};
MethodMapping.write = function (obj, pbf) {
    if (obj.mapped) pbf.writeStringField(1, obj.mapped);
    if (obj.obfuscated) pbf.writeStringField(2, obj.obfuscated);
    if (obj.description) pbf.writeStringField(3, obj.description);
    if (obj.intermediate) pbf.writeStringField(4, obj.intermediate);
};
